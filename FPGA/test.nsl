#include "macro.inc"
#include"meiro.inc"
#include"test.inc"
#include"mul_bit.inc"
module test{
    mul_bit mul_bit_x[2];
    meiro meirotest;
    mem map_test[MAP_SIZE][BIT]={ 
 WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL,
 WALL,START, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, WALL,//1
 WALL, LOAD, WALL, LOAD, WALL, LOAD, WALL, LOAD, WALL, LOAD, WALL, LOAD, WALL, LOAD, WALL, WALL,//2
 WALL, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, WALL,//3
 WALL, LOAD, WALL, LOAD, WALL, LOAD, WALL, LOAD, WALL, LOAD, WALL, LOAD, WALL, LOAD, WALL, WALL,//4
 WALL, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, LOAD, WALL,//5
 WALL, LOAD, WALL, LOAD, WALL, LOAD, WALL, LOAD, WALL, LOAD, WALL, LOAD, WALL, GOAL, WALL, WALL,//6
 WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL
    };
//    mem map_result[111][BIT];//={BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,
/*BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,
BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,
BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,
BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,
BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,BIT'b0,
BIT'b0,BIT'b0,BIT'b0,BIT'b0
};*/
    func_self fpga_MAP_SIZE_start();
    reg out_put_flag=1'b0;
    reg first[4]=4'b0;
    reg second[4]=4'b0;
    reg third[4]=4'b0;
    reg count[32]=32'b0;
    mem encode[16][8]={0b00111111,0b00000110,
	0b01011011,0b01001111,
	0b01100110,0b01101101,
	0b01111101,0b00100111,
	0b0111111111,0b01101111,
    0b01110111,0b01111100,
	0b00111001,0b01011110,
	0b01111001,0b01110001};
    func_self out_put();
    reg end_reg[2]=2'b0;

    if(end_reg==3){
        end_reg:=2;
    }else{
        end_reg++;
    }
    if(end_reg==2'b1){
            
           _display("hello");
           fpga_MAP_SIZE_start();
    }
    func fpga_MAP_SIZE_start seq{
           {
                   
    
    //    _display("hello");
        meirotest.in_do(map_test[0],map_test[1],map_test[2],map_test[3],map_test[4],map_test[5],map_test[6],map_test[7],map_test[8],map_test[9],
            map_test[10],map_test[11],map_test[12],map_test[13],map_test[14],map_test[15],map_test[16],map_test[17],map_test[18],map_test[19],
            map_test[20],map_test[21],map_test[22],map_test[23],map_test[24],map_test[25],map_test[26],map_test[27],map_test[28],map_test[29],
            map_test[30],map_test[31],map_test[32],map_test[33],map_test[34],map_test[35],map_test[36],map_test[37],map_test[38],map_test[39],
            map_test[40],map_test[41],map_test[42],map_test[43],map_test[44],map_test[45],map_test[46],map_test[47],map_test[48],map_test[49],
            map_test[50],map_test[51],map_test[52],map_test[53],map_test[54],map_test[55],map_test[56],map_test[57],map_test[58],map_test[59],
            map_test[60],map_test[61],map_test[62],map_test[63],map_test[64],map_test[65],map_test[66],map_test[67],map_test[68],map_test[69],
            map_test[70],map_test[71],map_test[72],map_test[73],map_test[74],map_test[75],map_test[76],map_test[77],map_test[78],map_test[79],
            map_test[80],map_test[81],map_test[82],map_test[83],map_test[84],map_test[85],map_test[86],map_test[87],map_test[88],map_test[89],
            map_test[90],map_test[91],map_test[92],map_test[93],map_test[94],map_test[95],map_test[96],map_test[97],map_test[98],map_test[99],
            map_test[100],map_test[101],map_test[102],map_test[103],map_test[104],map_test[105],map_test[106],map_test[107],map_test[108],map_test[109],
            map_test[110],map_test[111],map_test[112],map_test[113],map_test[114],map_test[115],map_test[116],map_test[117],map_test[118],map_test[119],
            map_test[120],map_test[121],map_test[122],map_test[123],map_test[124],map_test[125],map_test[126],map_test[127]
            );
           
       }
    }
    func meirotest.end_meiro{
				HEX0=0b1;	
        _display("bye");
        _finish();
    }
}
